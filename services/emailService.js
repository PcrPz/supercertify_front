// services/emailService.js

import { custom } from "zod";

/**
 * ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà
 * @param {Object} order ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 * @returns {Promise<boolean>} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
 */
export async function sendPaymentNotificationToAdmin(order) {
  console.log('Sending notification to admin, order ID:', order._id);
  console.log(order)
  try {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API Route App Router
    const response = await fetch('/api/email/notify-admin', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        orderId: order._id,
        trackingNumber: order.TrackingNumber,
        paymentInfo: order.payment,
        totalPrice: order.TotalPrice
      }),
    });
    
    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(result.message || 'Failed to send email notification');
    }
    
    return true;
  } catch (error) {
    console.error('Error sending admin notification email:', error);
    return false;
  }
}

/**
 * ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
 * @param {Object} order ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 * @returns {Promise<boolean>} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
 */
export async function sendPaymentApprovedToUser(order) {
  console.log('Sending payment approval email to user for order:', order.TrackingNumber);
  
  try {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API Route App Router
    const response = await fetch('/api/email/notify-user', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        trackingNumber: order.TrackingNumber,
        customerEmail: order.user.email ,
        customerName: order.user.username,
        totalPrice: order.TotalPrice,
        orderId: order._id
      }),
    });
    
    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(result.message || 'Failed to send email notification');
    }
    
    return true;
  } catch (error) {
    console.error('Error sending user notification email:', error);
    return false;
  }
}

/**
 * ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
 * @param {Object} order ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 * @param {Array} results ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * @returns {Promise<boolean>} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
 */
export async function sendCompletedResultsNotification(order, results) {
  console.log(`üìß [sendCompletedResultsNotification] Starting for order ${order.TrackingNumber}`);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  if (!order.user || !order.user.email) {
    console.error(`‚ùå [sendCompletedResultsNotification] Missing user.email`);
    return false;
  }
  
  if (!order.TrackingNumber) {
    console.error(`‚ùå [sendCompletedResultsNotification] Missing TrackingNumber`);
    return false;
  }
  
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á resultSummary
    const resultSummary = {
      total: results.length,
      passed: results.filter(r => r.resultStatus === 'pass').length,
      failed: results.filter(r => r.resultStatus === 'fail').length,
      pending: results.filter(r => r.resultStatus === 'pending').length
    };
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    const emailPayload = {
      trackingNumber: order.TrackingNumber,
      customerEmail: order.user.email,
      customerName: order.user.name || order.user.username,
      totalPrice: order.TotalPrice,
      orderId: order._id,
      results: results,
      resultSummary: resultSummary
    };
    
    console.log(`üìß [sendCompletedResultsNotification] Sending to ${emailPayload.customerEmail}`);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API Route
    const response = await fetch('/api/email/results-completed', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(emailPayload),
    });
    
    console.log(`üìß [sendCompletedResultsNotification] API response status: ${response.status}`);
    
    const result = await response.json();
    
    if (!response.ok) {
      console.error(`‚ùå [sendCompletedResultsNotification] API error:`, result);
      return false;
    }
    
    console.log(`‚úÖ [sendCompletedResultsNotification] Email sent successfully`);
    return true;
  } catch (error) {
    console.error(`‚ùå [sendCompletedResultsNotification] Error:`, error);
    return false;
  }
}