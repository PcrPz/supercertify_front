// services/paymentSettingsApi.js
import axios from 'axios';
import Cookies from 'js-cookie';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á axios ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const createApiInstance = () => {
  const token = Cookies.get('access_token');
  
  const instance = axios.create({
    baseURL: process.env.API_URL, // API Server ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    withCredentials: true,
    timeout: 15000 // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î timeout ‡πÄ‡∏õ‡πá‡∏ô 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  });
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° interceptor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ refresh token
  instance.interceptors.response.use(
    (response) => response,
    async (error) => {
      console.error(`‚ùå API Error: ${error.response?.status} ${error.config?.method?.toUpperCase()} ${error.config?.url}`);
      
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 401 Unauthorized ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° refresh
      if (error.response?.status === 401 && !error.config._retry) {
        console.log('üîÑ Attempting to refresh token...');
        error.config._retry = true;
        
        try {
          console.log('üì§ Calling refresh token API...');
          // ‡πÉ‡∏ä‡πâ axios ‡πÅ‡∏¢‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î loop
          const refreshResponse = await axios.post('/api/auth/refresh-token', {}, { 
            withCredentials: true 
          });
          
          console.log('üì• Refresh token response:', refreshResponse.data);
          
          if (refreshResponse.data.success) {
            console.log('‚úÖ Token refreshed successfully! Retrying original request...');
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ emit event ‡πÄ‡∏°‡∏∑‡πà‡∏≠ refresh token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            if (typeof window !== 'undefined') {
              window.dispatchEvent(new CustomEvent('auth:token-refreshed'));
            }
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï token ‡πÉ‡∏´‡∏°‡πà
            const newToken = Cookies.get('access_token');
            if (newToken) {
              error.config.headers.Authorization = `Bearer ${newToken}`;
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            return axios(error.config);
          } else {
            console.log('‚ùå Token refresh failed with success=false');
            if (typeof window !== 'undefined') {
              window.location.href = '/login';
            }
            return Promise.reject(error);
          }
        } catch (refreshError) {
          console.error('‚ùå Error during token refresh:', refreshError);
          if (typeof window !== 'undefined') {
            window.location.href = '/login';
          }
          return Promise.reject(refreshError);
        }
      }
      
      return Promise.reject(error);
    }
  );
  
  return instance;
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á axios ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multipart/form-data
const createFormDataApiInstance = () => {
  const token = Cookies.get('access_token');
  
  const instance = axios.create({
    baseURL: process.env.API_URL,
    headers: {
      'Authorization': `Bearer ${token}`
    },
    withCredentials: true,
    timeout: 30000 // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î timeout ‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
  });
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° interceptor ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô createApiInstance
  instance.interceptors.response.use(
    (response) => response,
    async (error) => {
      console.error(`‚ùå API Error: ${error.response?.status} ${error.config?.method?.toUpperCase()} ${error.config?.url}`);
      
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 401 Unauthorized ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° refresh
      if (error.response?.status === 401 && !error.config._retry) {
        console.log('üîÑ Attempting to refresh token...');
        error.config._retry = true;
        
        try {
          console.log('üì§ Calling refresh token API...');
          // ‡πÉ‡∏ä‡πâ axios ‡πÅ‡∏¢‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î loop
          const refreshResponse = await axios.post('/api/auth/refresh-token', {}, { 
            withCredentials: true 
          });
          
          console.log('üì• Refresh token response:', refreshResponse.data);
          
          if (refreshResponse.data.success) {
            console.log('‚úÖ Token refreshed successfully! Retrying original request...');
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ emit event ‡πÄ‡∏°‡∏∑‡πà‡∏≠ refresh token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            if (typeof window !== 'undefined') {
              window.dispatchEvent(new CustomEvent('auth:token-refreshed'));
            }
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï token ‡πÉ‡∏´‡∏°‡πà
            const newToken = Cookies.get('access_token');
            if (newToken) {
              error.config.headers.Authorization = `Bearer ${newToken}`;
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            return axios(error.config);
          } else {
            console.log('‚ùå Token refresh failed with success=false');
            if (typeof window !== 'undefined') {
              window.location.href = '/login';
            }
            return Promise.reject(error);
          }
        } catch (refreshError) {
          console.error('‚ùå Error during token refresh:', refreshError);
          if (typeof window !== 'undefined') {
            window.location.href = '/login';
          }
          return Promise.reject(refreshError);
        }
      }
      
      return Promise.reject(error);
    }
  );
  
  return instance;
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö logging ‡πÅ‡∏•‡∏∞ error handling
const apiCall = async (method, endpoint, data = null, isFormData = false) => {
  const api = isFormData ? createFormDataApiInstance() : createApiInstance();
  
  try {
    console.log(`üîÑ API Call: ${method.toUpperCase()} ${endpoint}`);
    console.time(`API ${method.toUpperCase()} ${endpoint}`);
    
    let response;
    const config = {};
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö form data
    if (isFormData) {
      config.timeout = 60000; // 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    }
    
    switch (method.toLowerCase()) {
      case 'get':
        response = await api.get(endpoint, config);
        break;
      case 'post':
        response = await api.post(endpoint, data, config);
        break;
      case 'put':
        response = await api.put(endpoint, data, config);
        break;
      case 'delete':
        response = await api.delete(endpoint, config);
        break;
      default:
        throw new Error(`Unsupported HTTP method: ${method}`);
    }
    
    console.timeEnd(`API ${method.toUpperCase()} ${endpoint}`);
    console.log(`‚úÖ API Success: ${method.toUpperCase()} ${endpoint}`, response.data);
    
    return response.data;
  } catch (error) {
    console.timeEnd(`API ${method.toUpperCase()} ${endpoint}`);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    if (error.response) {
      // Server responded with error status
      const errorMessage = error.response.data?.message || error.response.statusText || 'Server Error';
      console.error(`‚ùå API Error: ${method.toUpperCase()} ${endpoint}`, {
        status: error.response.status,
        message: errorMessage,
        data: error.response.data
      });
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á error object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
      const apiError = new Error(errorMessage);
      apiError.status = error.response.status;
      apiError.response = error.response;
      throw apiError;
    } else if (error.request) {
      // Network error
      console.error(`‚ùå Network Error: ${method.toUpperCase()} ${endpoint}`, error.message);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ');
    } else {
      // Other error
      console.error(`‚ùå API Error: ${method.toUpperCase()} ${endpoint}`, error.message);
      throw error;
    }
  }
};

// ============ Payment Settings API Functions ============

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Payment Methods (Public - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á auth)
 * @returns {Promise<Object>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payment methods
 */
export async function getPaymentMethods() {
  try {
    // ‡πÉ‡∏ä‡πâ axios ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô public API (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á token)
    const response = await axios.get(`${process.env.API_URL}/api/settings/payment_methods`, {
      timeout: 15000
    });
    
    console.log('‚úÖ Payment methods retrieved successfully');
    return response.data;
  } catch (error) {
    console.error('‚ùå Error getting payment methods:', error);
    
    // Return default data ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error
    return {
      qr_payment: {
        enabled: true,
        account_name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó SuperCertify ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        account_number: '0-9999-99999-99-9',
        qr_image: null,
        description: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå'
      },
      bank_transfer: {
        enabled: true,
        bank_name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢',
        account_name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó SuperCertify ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        account_number: 'XXX-X-XXXXX-X',
        description: '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£'
      }
    };
  }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Payment Methods (Admin only)
 * @param {Object} paymentData ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payment methods
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
export async function updatePaymentMethods(paymentData) {
  try {
    const result = await apiCall('put', '/api/settings/payment_methods', paymentData);
    
    return {
      success: true,
      data: result.data,
      message: result.message || '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    };
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.message || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
      error
    };
  }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code Image (Admin only)
 * @param {File} qrImageFile ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û QR Code
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
 */
export async function uploadQrCodeImage(qrImageFile) {
  try {
    // Validate file
    if (qrImageFile.size > 5 * 1024 * 1024) { // 5MB
      throw new Error('‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB');
    }

    if (!qrImageFile.type.startsWith('image/')) {
      throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
    }

    // Create FormData
    const formData = new FormData();
    formData.append('qr_image', qrImageFile);

    const result = await apiCall('post', '/api/settings/payment_methods/upload-qr', formData, true);
    
    return {
      success: true,
      qr_image_url: result.qr_image_url,
      data: result.data,
      message: result.message || '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    };
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.message || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code',
      error
    };
  }
}

/**
 * Validate Payment Methods Data (Admin only)
 * @param {Object} paymentData ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ validate
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£ validate
 */
export async function validatePaymentMethods(paymentData) {
  try {
    const result = await apiCall('post', '/api/settings/payment_methods/validate', paymentData);
    
    return {
      success: true,
      valid: result.valid,
      errors: result.errors || [],
      message: result.valid ? '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' : '‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    };
  } catch (error) {
    return {
      success: false,
      valid: false,
      errors: [error.response?.data?.message || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ validate'],
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ'
    };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Settings ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin only)
 * @returns {Promise<Object>} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ settings ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export async function getAllSettings() {
  try {
    const result = await apiCall('get', '/api/settings');
    
    return {
      success: true,
      data: result.data,
      message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    };
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.message || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤',
      error
    };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Setting ‡∏ï‡∏≤‡∏° Key
 * @param {string} key ‡∏ä‡∏∑‡πà‡∏≠ setting key
 * @returns {Promise<Object>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• setting
 */
export async function getSettingByKey(key) {
  try {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö payment_methods ‡πÉ‡∏ä‡πâ function ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    if (key === 'payment_methods') {
      return await getPaymentMethods();
    }
    
    const result = await apiCall('get', `/api/settings/${key}`);
    
    if (result.success) {
      return {
        success: true,
        data: result.data,
        message: `‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ '${key}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      };
    } else {
      return {
        success: false,
        message: result.message || `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ '${key}'`
      };
    }
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.message || error.message || `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ '${key}'`,
      error
    };
  }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Setting (Admin only)
 * @param {string} key ‡∏ä‡∏∑‡πà‡∏≠ setting key
 * @param {any} value ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
 * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
export async function updateSetting(key, value) {
  try {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö payment_methods ‡πÉ‡∏ä‡πâ function ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    if (key === 'payment_methods') {
      return await updatePaymentMethods(value);
    }
    
    const result = await apiCall('put', `/api/settings/${key}`, value);
    
    return {
      success: true,
      data: result.data,
      message: result.message || `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ '${key}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    };
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.message || error.message || `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ '${key}'`,
      error
    };
  }
}

// ============ Helper Functions ============

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Payment Methods
 * @returns {Promise<Object>} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 */
export async function checkPaymentMethodsStatus() {
  try {
    const paymentMethods = await getPaymentMethods();
    
    return {
      success: true,
      qr_enabled: paymentMethods.qr_payment?.enabled || false,
      bank_enabled: paymentMethods.bank_transfer?.enabled || false,
      has_qr_image: !!paymentMethods.qr_payment?.qr_image,
      any_enabled: (paymentMethods.qr_payment?.enabled || paymentMethods.bank_transfer?.enabled) || false
    };
  } catch (error) {
    return {
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ',
      error
    };
  }
}

/**
 * ‡∏î‡∏∂‡∏á QR Code URL
 * @returns {Promise<string|null>} URL ‡∏Ç‡∏≠‡∏á QR Code ‡∏´‡∏£‡∏∑‡∏≠ null
 */
export async function getQrCodeUrl() {
  try {
    const paymentMethods = await getPaymentMethods();
    return paymentMethods.qr_payment?.qr_image || null;
  } catch (error) {
    console.error('Error getting QR code URL:', error);
    return null;
  }
}